%template ProgramLife
%toc

=== 内中断 ===
<hr>
* 中断的产生（以下四种情况产生中断）
 
    | 情况                   | 中断类型码 |
    | 除法错误，比如除法溢出 | 0          |
    | 单步执行               | 1          |
    | 执行int0指令           | 4          |
    | 执行int指令（int n)    | n          |

* 中断过程
	# 取得中断类型码N；
	# pushf
	# TF=0, IF=0
	# push CS
	# push IP
	# (IP)=(N*4), （CS)=(N*4+2)
* 中断处理程序的常规步骤
	# 保存用到的寄存器
	# 处理中断
	# 恢复用到的寄存器
	# 用iret指令返回
{{{
  iret指令相当于：
	  1.pop IP
	  2.pop CS
	  3.popf
  }}}
* 单步中断
	基本上，CPU在执行完一条指令后，如果检测到标志寄存器的TF位为1，则产生单步中断，引发中断过程。
	单步中断的中断类型码为1，它所引发的中断过程如下：
	# 取得中断类型码1；
	# 标志寄存器入栈，TF，IF设置为0
	# CS，IP入栈
	# (IP)=(1*4), (CS)=(1*4+2)

=== DOS中断例程的应用 ===
<hr>
* int 21h中断例程是DOS提供的中断例程，其中包含了DOS提供给程序员在编程时调用的子程序。
* int 21h的4ch号功能，程序返回功能
{{{
	mov ah, 4ch		; 程序返回
	mov al, 0		; 返回值
	int 21h
	
	(ah)=4ch表示调用21号中断例程的4ch号子程序,功能为程序返回,可以提供返回值作为参数。
  }}}
  
=== 外中断 ===
<hr>
* 中断源两类
	# 可屏蔽中断
	# 不可屏蔽中断（中断类型码固定为2）
