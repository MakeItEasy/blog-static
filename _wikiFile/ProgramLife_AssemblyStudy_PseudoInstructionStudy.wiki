%template ProgramLife
%toc

=== 伪指令一览 ===
<hr>
* dw: 定义一个字单元
* db: 定义一个字节单元
* dd: 定义一个双字单元
* org: 指定起始位置伪指令
* $: 当前位置计数器

=== 操作符一览 ===
<hr>
* dup: 进行数据的重复定义,和dd,dw,db配合使用
* offset: 由编译器处理的符号，功能是取得标号的偏移地址。这个便宜地址是相对于code段的，不是相对于标号start的。[PG162_1.asm]

=== dup ===
<hr>
* 定义格式: [db/dw/dd 重复的次数 dup (重复的字节/字/双字型数据)]
* 例: db 3 dup ('abc', 'ABC')   ===   18个字节, 'abcABCabcABCabcABC'

=== org ===
<hr>
（1）指定起始位置伪指令<br />
格式：ORG 表达式<br />
其中，ORG（origin）是操作码，不可省略。表达式给出偏移地址值，即ORG语句后的指令或数据以表达式给出的值作为起始的偏移地址。<br />
表达式必须是一个可计算得到的正整数，数值范围在0～65 535之间。<br />

ORG伪指令用来指出其后的程序段或数据块存放的起始地址的偏移量。汇编程序汇编时把语句中表达式的值作为起始地址，<br />
连续存放ORG语句之后的程序和数据，直到出现一个新的ORG指令。若省略ORG语句，则从本段起始地址开始连续存放。<br />

在大多数情况下，不需要用ORG语句设置位置指针。由于段定义语句是段的起点，它的偏移地址为0000H，以后每分配一个字节，位置指针自动加1，<br />
所以每条指令都有确定的偏移地址。只有程序要求改变这个位置指针时，才需要安排ORG语句。通常ORG语句可以出现在程序中任何位置上。
{{{
【例4.21】

SDATA SEGMENT
ORG   0010H 
D1    DB 00H, 5AH, 80H, 24H
ORG   30H

D2    DW 4142H, 6162H, 0A0DH  
SDATA ENDS

如果不设置ORG语句，字节变量D1的第一个元素00H的偏移地址为0000H，字变量D2的第一个元素4142H的偏移地址应为0004H。
由于ORG的设置，D1的第一个元素00H的偏移地址为0010H，而D2的第一个元素4142H的偏移地址为0030H。 
  }}}
（2）当前位置计数器<br />
在汇编程序对源程序进行汇编的过程中，使用地址计数器来保证当前正在汇编的指令地址。<br />
地址计数器值可用“$”来表示，汇编语言也允许用户直接用“$”来引用地址计数器的当前值，<br />
因此，ORG $＋5可表示从当前地址开始跳过5个字节存储单元，在指令和伪指令中，也可直接用“$”表示地址计数器的当前值。<br />
例如： JGE $＋8<br />
表明满足条件时要转移的地址是JGE指令的首地址加上8，指令中使用的“$”表示本指令中第一个字节的偏移地址。
