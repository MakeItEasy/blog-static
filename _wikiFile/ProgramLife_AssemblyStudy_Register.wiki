%template ProgramLife
%toc

=== 概述 ===
<hr>
* 8086CPU有14个寄存器。AX, BX, CX, DX, SI, DI, SP, BP, IP, CS, SS, DS, ES, PSW

=== 分类 ===
<hr>
* 通用寄存器：ax, bx, cx, dx
* 段寄存器：cs, ds, ss, es

=== CS & IP ===
<hr>
* 8086机中，任意时刻，CPU将CS:IP指向的内容当作指令执行

=== DS & [address] ===
<hr>
* DS寄存器通常用来存放要访问的数据的段地址<br />
	比如 mov ax, [0]，没有指定段地址，默认的段地址就是DS。

=== SS & SP ===
<hr>
* 8086机中，栈顶的段地址存放在SS中，偏移地址存放在SP中。
* 任意时刻，SS:SP指向栈顶元素。

=== bx ===
<hr>
* bx中一般存放的是便宜地址量，默认的段地址在DS中。一般用[bx]

=== SI & DI ===
<hr>
* SI和DI是8086CPU中和bx功能相近的寄存器，SI和DI不能够分成两个8位寄存器来使用。

=== bx & si & di & bp ===
<hr>
* 总结
	# 在8086CPU中，只有这4个寄存器可以用在"[...]"中来进行内存单元的寻址。
	# 在[...]中，这4个寄存器可以单个出现，或只能以四种组合出现：bx和si，bx和di，bp和si，bp和di
	# 只要在[...]中使用寄存器bp，而指令中没有显性给出段地址，那么段地址默认在ss中。

=== PSW(程序状态字) ===
<hr>
==== 标志位一览 ====
	# OF	Overflow	11		溢出标志位
	# DF	Direction	10		方向标志位
	# IF				9
	# TF				8
	# SF	Sign		7		符号标志位
	# ZF	Zero		6		零标志位
	# AF				4
	# PF	Parity		2		奇偶标志位
	# CF	Carry-over	0		进位标志位

==== 标志寄存器注意事项 ====
* 有的指令的执行是影响标志寄存器的，比如：add,sub,mul,div,inc,or,and等，他们大都是运算指令（进行逻辑或算术运算）；<br />
	有的指令的执行对标志寄存器没有影响，比如：mov,push,pop等，它们大都是传送指令。
* CF和OF的区别：CF是对无符号数运算有意义的标志位，而OF是对有符号数运算有意义的标志位。
* CF和OF所表示的进位和溢出，是分别对无符号数和有符号数运算而言的，它们之间没有任何关系。

==== PF ====
* 如果1的个数为偶数，PF=1，如果为奇数，PF=0

==== OF ====
* 什么是溢出？<br />
{{{
在进行有符号数运算的时候，如结果超过了机器所能表示的范围称为溢出。
注意是 有符号数的运算。
  }}}

==== DF ====
* 方向标志位。在串处理指令中，控制每次操作后si,di的增减。
	DF=0，每次操作后si,di递增
	DF=1，每次操作后si,di递减

==== TF ====
* 单步中断标志位<br />
CPU在执行完一条指令之后，如果检测到标志寄存器中的TF为1，则产生单步中断，引发中断过程。<br />
如果为0的话，则不产生单步中断。
* 当TF=1时，引发单步中断，转去执行中断程序，但是中断程序也是由一条条指令组成，如果在执行指令之前，TF=1的话，<br />
那么在执行一条指令后，又会产生单步中断。<br />
CPU当然不会让这种情况发生，解决办法是在进入中断处理程序之前，设置TF=0，从而避免在CPU执行中断处理程序的时候发生单步中断。
这就是为什么在中断过程中有TF=0这个步骤。

==== IF ====
* CPU是否响应可屏蔽中断，要看标志寄存器中的IF位的设置。如果IF=1，则CPU在执行完当前指令后响应中断，引发中断过程。<br />
如果IF=0，则不响应可屏蔽中断。

